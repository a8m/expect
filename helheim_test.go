// This file was generated by github.com/nelsam/hel.  Do not
// edit this code by hand unless you *really* know what you're
// doing.  Expect any changes made manually to be overwritten
// the next time hel regenerates this file.

package expect_test

import "testing"

type mockT struct {
	RunCalled chan bool
	RunInput  struct {
		Name chan string
		Test chan func(t *testing.T)
	}
	RunOutput struct {
		Succeeded chan bool
	}
	ErrorfCalled chan bool
	ErrorfInput  struct {
		Format chan string
		Args   chan []interface{}
	}
	FatalCalled chan bool
	FatalInput  struct {
		Arg0 chan []interface{}
	}
	FailNowCalled chan bool
}

func newMockT() *mockT {
	m := &mockT{}
	m.RunCalled = make(chan bool, 100)
	m.RunInput.Name = make(chan string, 100)
	m.RunInput.Test = make(chan func(t *testing.T), 100)
	m.RunOutput.Succeeded = make(chan bool, 100)
	m.ErrorfCalled = make(chan bool, 100)
	m.ErrorfInput.Format = make(chan string, 100)
	m.ErrorfInput.Args = make(chan []interface{}, 100)
	m.FatalCalled = make(chan bool, 100)
	m.FatalInput.Arg0 = make(chan []interface{}, 100)
	m.FailNowCalled = make(chan bool, 100)
	return m
}
func (m *mockT) Run(name string, test func(t *testing.T)) (succeeded bool) {
	m.RunCalled <- true
	m.RunInput.Name <- name
	m.RunInput.Test <- test
	return <-m.RunOutput.Succeeded
}
func (m *mockT) Errorf(format string, args ...interface{}) {
	m.ErrorfCalled <- true
	m.ErrorfInput.Format <- format
	m.ErrorfInput.Args <- args
}
func (m *mockT) Fatal(arg0 ...interface{}) {
	m.FatalCalled <- true
	m.FatalInput.Arg0 <- arg0
}
func (m *mockT) FailNow() {
	m.FailNowCalled <- true
}

type mockMatcher struct {
	MatchCalled chan bool
	MatchInput  struct {
		Actual chan interface{}
	}
	MatchOutput struct {
		Ret0 chan error
	}
}

func newMockMatcher() *mockMatcher {
	m := &mockMatcher{}
	m.MatchCalled = make(chan bool, 100)
	m.MatchInput.Actual = make(chan interface{}, 100)
	m.MatchOutput.Ret0 = make(chan error, 100)
	return m
}
func (m *mockMatcher) Match(actual interface{}) error {
	m.MatchCalled <- true
	m.MatchInput.Actual <- actual
	return <-m.MatchOutput.Ret0
}
